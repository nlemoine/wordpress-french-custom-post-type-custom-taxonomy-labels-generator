{"version":3,"sources":["../node_modules/refractor/lang/lua.js","../node_modules/refractor/lang/etlua.js"],"names":["lua","Prism","languages","comment","string","pattern","greedy","number","keyword","function","operator","lookbehind","punctuation","module","exports","displayName","aliases","refractorLua","require","refractorMarkupTemplating","etlua","register","delimiter","alias","inside","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"+HAKA,SAASA,EAAIC,GACXA,EAAMC,UAAUF,IAAM,CACpBG,QAAS,yCAETC,OAAQ,CACNC,QAAS,qFACTC,QAAQ,GAEVC,OAAQ,gHACRC,QAAS,0HACTC,SAAU,2BACVC,SAAU,CACR,wCACA,CAEEL,QAAS,qBACTM,YAAY,IAGhBC,YAAa,uBAtBjBC,EAAOC,QAAUd,EACjBA,EAAIe,YAAc,MAClBf,EAAIgB,QAAU,I,iCCHd,IAAIC,EAAeC,EAAQ,KACvBC,EAA4BD,EAAQ,IAIxC,SAASE,EAAMnB,GACbA,EAAMoB,SAASJ,GACfhB,EAAMoB,SAASF,GACd,SAAWlB,GACVA,EAAMC,UAAUkB,MAAQ,CACtBE,UAAW,CACTjB,QAAS,iBACTkB,MAAO,eAET,eAAgB,CACdlB,QAAS,UACTmB,OAAQvB,EAAMC,UAAUF,MAG5BC,EAAMwB,MAAMC,IAAI,mBAAmB,SAAUC,GAE3C1B,EAAMC,UAAU,qBAAqB0B,kBACnCD,EACA,QAHY,oBAOhB1B,EAAMwB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1C1B,EAAMC,UAAU,qBAAqB2B,qBAAqBF,EAAK,YApBlE,CAsBE1B,GA5BLY,EAAOC,QAAUM,EACjBA,EAAML,YAAc,QACpBK,EAAMJ,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_etlua.cbd0319c.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = lua\nlua.displayName = 'lua'\nlua.aliases = []\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number: /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n      /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n      {\n        // Match \"..\" but don't break \"...\"\n        pattern: /(^|[^.])\\.\\.(?!\\.)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  }\n}\n","'use strict'\nvar refractorLua = require('./lua.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = etlua\netlua.displayName = 'etlua'\netlua.aliases = []\nfunction etlua(Prism) {\n  Prism.register(refractorLua)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'etlua',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua')\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}