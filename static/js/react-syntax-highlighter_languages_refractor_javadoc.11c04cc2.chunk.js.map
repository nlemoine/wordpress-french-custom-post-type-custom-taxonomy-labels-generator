{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_javadoc.11c04cc2.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/java.js","../node_modules/refractor/lang/javadoc.js","../node_modules/refractor/lang/javadoclike.js"],"sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(\\:\\:\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:\\s*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference = /(?:[a-zA-Z]\\w+\\s*\\.\\s*)*[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n      /<mem>/g,\n      function () {\n        return memberReference\n      }\n    )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|throws|see|link|linkplain|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern: /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern: /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"names":["java","Prism","keywords","classNamePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","keyword","function","clike","number","operator","insertBefore","greedy","alias","annotation","generics","replace","module","exports","displayName","aliases","refractorJava","require","refractorJavadoclike","javadoc","register","codeLinePattern","memberReference","reference","field","code","line","tag","markup","entity","javadoclike","addSupport","javaDocLike","parameter","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","Array","isArray","i","l","length","docCommentSupport","rest"],"sourceRoot":""}