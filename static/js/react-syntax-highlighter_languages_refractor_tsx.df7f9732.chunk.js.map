{"version":3,"sources":["../node_modules/refractor/lang/typescript.js","../node_modules/refractor/lang/jsx.js","../node_modules/refractor/lang/tsx.js"],"names":["typescript","Prism","languages","extend","pattern","lookbehind","greedy","inside","keyword","builtin","typeInside","insertBefore","function","generic","alias","ts","module","exports","displayName","aliases","jsx","javascript","util","clone","tag","spread","punctuation","script","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language","refractorJsx","require","refractorTypescript","tsx","register","RegExp","source","flags"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_tsx.df7f9732.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n      keyword: /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n      builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i\n    Prism.languages.jsx.tag.inside[\n      'attr-value'\n    ].pattern = /=(?!\\{)(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s'\">]+)/i\n    Prism.languages.jsx.tag.inside['tag'].inside[\n      'class-name'\n    ] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: /\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,\n          inside: {\n            punctuation: /\\.{3}|[{}.]/,\n            'attr-value': /\\w+/\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: /=(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\})/i,\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?={)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          },\n          alias: 'language-javascript'\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function (token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function (tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"],"sourceRoot":""}