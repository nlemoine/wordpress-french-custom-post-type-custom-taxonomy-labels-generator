{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_tt2.ce446cf4.chunk.js","mappings":"wHACA,IAAIA,EAA4BC,EAAQ,KAIxC,SAASC,EAAIC,GACXA,EAAMC,SAASJ,GACd,SAAWG,GACVA,EAAME,UAAUH,IAAMC,EAAME,UAAUC,OAAO,QAAS,CACpDC,QAAS,sBACTC,QACE,0NACFC,YAAa,eAEfN,EAAME,UAAUK,aAAa,MAAO,SAAU,CAC5CC,SAAU,iDACVC,SAAU,CACRC,QAAS,mDAGbV,EAAME,UAAUK,aAAa,MAAO,UAAW,CAC7CI,UAAW,CACTD,QAAS,uBACTE,MAAO,iBAGXZ,EAAME,UAAUK,aAAa,MAAO,SAAU,CAC5C,uBAAwB,CACtBG,QAAS,gCACTG,QAAQ,EACRD,MAAO,UAET,uBAAwB,CACtBF,QAAS,gCACTG,QAAQ,EACRD,MAAO,SACPE,OAAQ,CACNL,SAAU,CACRC,QAAS,wDAKVV,EAAME,UAAUH,IAAIgB,OAC3Bf,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAE3ClB,EAAME,UAAU,qBAAqBiB,kBACnCD,EACA,MAHe,sBAOnBlB,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1ClB,EAAME,UAAU,qBAAqBkB,qBAAqBF,EAAK,UA9ClE,CAgDElB,GArDLqB,EAAOC,QAAUvB,EACjBA,EAAIwB,YAAc,MAClBxB,EAAIyB,QAAU","sources":["../node_modules/refractor/lang/tt2.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = tt2\ntt2.displayName = 'tt2'\ntt2.aliases = []\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword:\n        /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    })\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|not|or)\\b/,\n      variable: {\n        pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }) // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'tt2',\n        tt2Pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2')\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","require","tt2","Prism","register","languages","extend","comment","keyword","punctuation","insertBefore","operator","variable","pattern","delimiter","alias","greedy","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases"],"sourceRoot":""}